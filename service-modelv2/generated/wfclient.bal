// Following code is generated by looking at the service model by the compiler.
import workflow.workflow;

public isolated client class OrderWorkflowClient {

    private final string name = "OrderWorkflow";

    private final workflow:WorkflowEngineClient cl;

    public function init(workflow:WorkflowEngine engine) returns error? {
        self.cl = engine.getClient();
    }

    public isolated function search(string orderId) returns workflow:Execution?|error {
        map<anydata> cid = {orderId };
        return self.cl.search(self.name, cid);
    }

    isolated remote function processOrder(string orderId) returns workflow:Execution|error {
        // Auto Generated client method to start the workflow
        return self.cl.startNew(self.name, "processOrder", orderId);
    };

    isolated remote function approve(string orderId, boolean approvalStatus) returns error? {
        workflow:Execution? execution = check self.search(orderId);
        if execution is () {
            return error("No active workflow found for orderId: " + orderId);
        }
        return self.cl.signal(execution, "approve", approvalStatus);
    }

    isolated remote function addItem(string orderId, string newItem) returns int|error {
        workflow:Execution? execution = check self.search(orderId);
        if execution is () {
            return error("No active workflow found for orderId: " + orderId);
        }
        return self.cl.update(execution, "addItem", newItem).ensureType();
    }

    isolated remote function getStatus(string orderId) returns string|error {
        workflow:Execution? execution = check self.search(orderId);
        if execution is () {
            return error("No active workflow found for orderId: " + orderId);
        }
        return self.cl.query(execution, "getStatus").ensureType();
    }

    public isolated function stop(string orderId) returns error? {
        workflow:Execution? execution = check self.search(orderId);
        if execution is () {
            return error("No active workflow found for orderId: " + orderId);
        }
        return self.cl.stop(execution);
    }

    // We can make this exact type. 
    public isolated function getState(string orderId) returns map<anydata>|error {
        workflow:Execution? execution = check self.search(orderId);
        if execution is () {
            return error("No active workflow found for orderId: " + orderId);
        }
        // We can do Additional data binding.
        return self.cl.getState(execution).cloneReadOnly();
    }
}
